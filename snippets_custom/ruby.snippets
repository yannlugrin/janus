#
# Global
#
snippet #!
	#!/usr/bin/env ruby
snippet #utf
	# encoding: utf-8
snippet require
	require '${1}'${2}
snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end

#
# if, case, while, each, ...
#
snippet if
	if ${1:condition}
		${2}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet else
	else
		${1}
snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
# each
snippet ea
	each {|${1:e}| ${2} }
snippet ead
	each do |${1:e}|
		${2}
	end
# each_key
snippet eak
	each_key {|${1:key}| ${2} }
snippet eakd
	each_key do |${1:key}|
		${2}
	end
# each_value
snippet eav
	each_value {|${1:value}| ${2} }
snippet eavd
	each_value do |${1:value}|
		${2}
	end
# each_with_index
snippet eawi
	each_with_index {|${1:e}, ${2:index}| ${3} }
snippet eawid
	each_with_index do |${1:e}, ${2:index}|
		${3}
	end

#
# Classes & Modules
#
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		
		def initialize(${2:args})
			${3}
		end
		
	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		
		def initialize(${3:args})
			${4}
		end
		
	end
snippet cla ClassName = Struct .. do .. end
	${1:`substitute(Filename(), '^.', '\u&', '')`} = Struct.new(:${2:attr_names}) do
		
		def ${3:method_name}
			${4}
		end
		
	end
snippet cla class << self .. end
	class << ${1:self}
		${2}
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. ClassMethods .. end
	require 'active_supprt/concern'
	
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		extend ActiveSupport::Concern
		
		included do
			${2}
		end
		
		module ClassMethods
		end
		
		module InstanceMethods
		end
		
	end

#
# Methods & Attributes
#
snippet def
	def ${1:method_name}
		${2}
	end
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
snippet defmm
	def method_missing(name, *args, &blk)
		${1}
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}

#
# RSpec
#
snippet spec
	require 'spec_helper'
	
	describe ${1:description_or_tested_class} do
		
		${2}
		
	end
snippet desc
	describe '${1}' do
		${2}
	end
snippet context
	context '${1}' do
		${2}
	end
snippet it
	it '${1}' do
		${2}
	end
snippet before
	before${1:(:each) }do
		${2}
	end

#
# Rake
#
snippet namespace
	namespace :${1:`Filename()`} do
		${2}
	end
snippet task
	desc "${1:Task description\}"
	task :${2:task_name => [:dependent, :tasks]} do
		${3}
	end

